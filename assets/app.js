let app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",(function(e,n){t.currentUser=n}))}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then((function(e){t.$emit("login",e.data)}))}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({username:"dickeyxxx",body:t.postBody}).success((function(e){t.posts.unshift(e),t.postBody=null}))},e.fetch().success((function(e){t.posts=e}))}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.createUser(n,o).then((function(e){t.$emit("login",e.data)}))}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){let e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then((function(n){return t.defaults.headers.common["X-Auth"]=n.data,e.getUser()}))},e.createUser=function(n,o){return t.post("/api/users",{username:n,password:o}).then((function(t){return console.log(t),e.login(n,o)}))}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdC5jdHJsLmpzIiwicG9zdHMuc3ZjLmpzIiwicmVnaXN0ZXIuY3RybC5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsInJlZ2lzdGVyIiwiY3JlYXRlVXNlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLElBQUFDLFFBQUFDLE9BQUEsTUFBQSxDQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxrQkFBQSxDQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxTQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLFlBQUFELFFDSEFOLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxZQUFBLENBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFLLEdBQ0FMLEVBQUFNLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUMsTUFBQSxTQUFBQyxHQUNBVixFQUFBVyxNQUFBLFFBQUFELEVBQUFFLGFDTEFmLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxZQUFBLENBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FiLEVBQUFjLFFBQUEsV0FDQWQsRUFBQWUsVUFDQUYsRUFBQUcsT0FBQSxDQUNBVCxTQUFBLFlBQ0FVLEtBQUFqQixFQUFBZSxXQUNBRyxTQUFBLFNBQUFDLEdBQ0FuQixFQUFBb0IsTUFBQUMsUUFBQUYsR0FDQW5CLEVBQUFlLFNBQUEsU0FJQUYsRUFBQVMsUUFBQUosU0FBQSxTQUFBRSxHQUNBcEIsRUFBQW9CLE1BQUFBLFFDZEF2QixRQUFBQyxPQUFBLE9BQ0F5QixRQUFBLFdBQUEsQ0FBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUFILE1BQUEsV0FDQSxPQUFBRSxFQUFBRSxJQUFBLGVBRUFELEtBQUFULE9BQUEsU0FBQUcsR0FDQSxPQUFBSyxFQUFBTCxLQUFBLGFBQUFBLE9DTkF0QixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsZUFBQSxDQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBSyxHQUNBTCxFQUFBMkIsU0FBQSxTQUFBcEIsRUFBQUMsR0FDQUgsRUFBQXVCLFdBQUFyQixFQUFBQyxHQUNBQyxNQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsYUNMQWYsUUFBQUMsT0FBQSxPQUNBK0IsT0FBQSxDQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsSUFBQSxDQUFBaEMsV0FBQSxZQUFBaUMsWUFBQSxlQUNBRCxLQUFBLFlBQUEsQ0FBQWhDLFdBQUEsZUFBQWlDLFlBQUEsa0JBQ0FELEtBQUEsU0FBQSxDQUFBaEMsV0FBQSxZQUFBaUMsWUFBQSxrQkNMQW5DLFFBQUFDLE9BQUEsT0FDQXlCLFFBQUEsVUFBQSxDQUFBLFFBQUEsU0FBQUMsR0FDQSxJQUFBUyxFQUFBUixLQUVBUSxFQUFBQyxRQUFBLFdBQ0EsT0FBQVYsRUFBQUUsSUFBQSxlQUdBTyxFQUFBM0IsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFnQixFQUFBTCxLQUFBLGdCQUFBLENBQ0FaLFNBQUFBLEVBQ0FDLFNBQUFBLElBQ0FDLE1BQUEsU0FBQTBCLEdBRUEsT0FEQVgsRUFBQVksU0FBQUMsUUFBQUMsT0FBQSxVQUFBSCxFQUFBdkIsS0FDQXFCLEVBQUFDLGNBR0FELEVBQUFMLFdBQUEsU0FBQXJCLEVBQUFDLEdBQ0EsT0FBQWdCLEVBQUFMLEtBQUEsYUFBQSxDQUNBWixTQUFBQSxFQUNBQyxTQUFBQSxJQUNBQyxNQUFBLFNBQUEwQixHQUVBLE9BREFJLFFBQUFDLElBQUFMLEdBQ0FGLEVBQUEzQixNQUFBQyxFQUFBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcblx0XHQnbmdSb3V0ZSdcblx0XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKXtcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXHR9KVxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3ZjKXtcblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXsgXG5cdFx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTsgXG5cdFx0XHR9KVxuXHR9XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuXHQkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpe1xuXHRcdGlmKCRzY29wZS5wb3N0Qm9keSl7XG5cdFx0XHRQb3N0c1N2Yy5jcmVhdGUoe1xuXHRcdFx0XHR1c2VybmFtZTogJ2RpY2tleXh4eCcsXG5cdFx0XHRcdGJvZHk6ICRzY29wZS5wb3N0Qm9keVx0XG5cdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdFx0JHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcblx0XHRcdH0pXG5cdFx0fVxuXHR9O1xuXHRQb3N0c1N2Yy5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpIHtcblx0XHQkc2NvcGUucG9zdHMgPSBwb3N0cztcblx0fSk7XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuXHR9XG5cdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCkge1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdH1cbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclN2Yyl7XG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0VXNlclN2Yy5jcmVhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZClcblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXsgXG5cdFx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTsgXG5cdFx0XHR9KVxuXHR9XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpe1xuXHQkcm91dGVQcm92aWRlclxuXHQud2hlbignLycsIHsgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuXHQud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG5cdC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnfSlcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG5cdGxldCBzdmMgPSB0aGlzO1xuXHRcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuXHR9XG5cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24odmFsKXtcblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhO1xuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0fSk7XG5cdH1cblx0c3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1xuXHRcdFx0Y29uc29sZS5sb2codmFsKTtcblx0XHRcdHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcblx0XHR9KTtcblx0fVxufSk7XG4iXX0=
