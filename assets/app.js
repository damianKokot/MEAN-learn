let app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(t,o){t.$on("login",(function(o,n){t.currentUser=n})),t.logout=function(){t.currentUser=null,o.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(n,e){o.login(n,e).then((function(o){t.$emit("login",o.data)}))}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({username:"dickeyxxx",body:t.postBody}).success((function(){t.postBody=null}))},t.$on("ws:new_post",(function(o,n){t.$apply((function(){t.posts.unshift(n)}))})),o.fetch().success((function(o){t.posts=o}))}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.register=function(n,e){o.createUser(n,e).then((function(o){t.$emit("login",o.data)}))}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){let o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then((function(n){return t.defaults.headers.common["X-Auth"]=n.data,o.getUser()}))},o.logout=function(){t.defaults.headers.common["X-Auth"]=null},o.createUser=function(n,e){return t.post("/api/users",{username:n,password:e}).then((function(t){return console.log(t),o.login(n,e)}))}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(t){let o;this.connect=function(){(o=new WebSocket("https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host)).onmessage=function(o){const n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}},this.send=function(t,n){const e=JSON.stringify({topic:t,data:n});o.send(e)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
